#!/bin/bash

# Quality Gate Script para Nuxt WebNovaWp
# Este script ejecuta todas las pruebas (unitarias + E2E) con cobertura y env√≠a los resultados a SonarQube

set -e  # Exit on any error

echo "üöÄ Iniciando Quality Gate para Nuxt WebNovaWp..."
echo "üìÖ Fecha: $(date)"
echo ""

# Navegar al directorio del proyecto
cd /home/jorgeblanc9/microservicios/portafolio/nuxt-webnovawp/app

# Verificar que estamos en el directorio correcto
if [ ! -f "package.json" ]; then
    echo "‚ùå Error: No se encontr√≥ package.json en el directorio actual"
    exit 1
fi

# Cargar variables de entorno desde .env si existe
if [ -f ".env" ]; then
    echo "üìÑ Cargando variables de entorno desde .env..."
    export $(cat .env | grep -v '^#' | xargs)
    echo "‚úÖ Variables de entorno cargadas desde .env"
elif [ -f "env.example" ]; then
    echo "‚ö†Ô∏è  Archivo .env no encontrado, pero existe env.example"
    echo "üí° Para usar variables de entorno locales, copia env.example a .env:"
    echo "   cp env.example .env"
fi

echo "üìÅ Directorio de trabajo: $(pwd)"
echo ""

# Cargar nvm y usar la versi√≥n correcta
echo "üîß Cargando Node.js con nvm..."
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

# Usar la versi√≥n especificada en .nvmrc
if [ -f ".nvmrc" ]; then
    echo "üìã Usando versi√≥n de Node.js del .nvmrc..."
    nvm use
    echo "‚úÖ Node.js versi√≥n: $(node --version)"
    echo "‚úÖ npm versi√≥n: $(npm --version)"
else
    echo "‚ùå Error: No se encontr√≥ archivo .nvmrc"
    exit 1
fi
echo ""

# Instalar dependencias
echo "üì¶ Instalando dependencias..."
npm install
echo "‚úÖ Dependencias instaladas"
echo ""

# Verificar que el servidor de desarrollo est√© ejecut√°ndose para las pruebas E2E
echo "üîç Verificando servidor de desarrollo..."
if ! curl -s http://localhost:3000 > /dev/null; then
    echo "‚ö†Ô∏è  Servidor de desarrollo no est√° ejecut√°ndose"
    echo "üöÄ Iniciando servidor de desarrollo en segundo plano..."
    npm run dev &
    DEV_PID=$!
    echo "‚è≥ Esperando que el servidor est√© listo..."
    sleep 15
    
    # Verificar que el servidor est√© funcionando
    if ! curl -s http://localhost:3000 > /dev/null; then
        echo "‚ùå Error: No se pudo iniciar el servidor de desarrollo"
        exit 1
    fi
    echo "‚úÖ Servidor de desarrollo iniciado (PID: $DEV_PID)"
else
    echo "‚úÖ Servidor de desarrollo ya est√° ejecut√°ndose"
    DEV_PID=""
fi
echo ""

# Ejecutar linting
echo "üîç Ejecutando ESLint..."
set +e  # No salir en error para continuar con las pruebas
npx eslint . --ext .vue,.js,.ts,.jsx,.tsx
LINT_EXIT_CODE=$?
if [ $LINT_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ ESLint completado exitosamente"
else
    echo "‚ö†Ô∏è  ESLint completado con errores (c√≥digo: $LINT_EXIT_CODE)"
    echo "üí° Continuando con las pruebas..."
fi
echo ""

# Ejecutar formateo (si est√° configurado)
echo "‚ú® Verificando formato..."
if command -v prettier &> /dev/null; then
    npx prettier --check .
    FORMAT_EXIT_CODE=$?
    if [ $FORMAT_EXIT_CODE -eq 0 ]; then
        echo "‚úÖ Formato verificado exitosamente"
    else
        echo "‚ö†Ô∏è  Formato verificado con errores (c√≥digo: $FORMAT_EXIT_CODE)"
        echo "üí° Continuando con las pruebas..."
    fi
else
    echo "‚ö†Ô∏è  Prettier no est√° configurado, saltando verificaci√≥n de formato"
    FORMAT_EXIT_CODE=0
fi
echo ""

# Ejecutar tests unitarios con cobertura
echo "üß™ Ejecutando tests unitarios con cobertura..."
if npm run test 2>/dev/null; then
    npm run test
    UNIT_TEST_EXIT_CODE=$?
else
    echo "‚ö†Ô∏è  No se encontraron tests unitarios configurados"
    echo "üí° Saltando tests unitarios..."
    UNIT_TEST_EXIT_CODE=0
fi

if [ $UNIT_TEST_EXIT_CODE -eq 0 ]; then
    echo "‚úÖ Tests unitarios completados exitosamente"
else
    echo "‚ö†Ô∏è  Tests unitarios completados con errores (c√≥digo: $UNIT_TEST_EXIT_CODE)"
    echo "üí° Continuando con las pruebas E2E..."
fi
echo ""

# Ejecutar tests E2E (si est√°n configurados)
echo "üåê Verificando tests E2E..."
if [ -f "cypress.config.js" ] || [ -f "cypress.config.ts" ] || [ -d "cypress" ]; then
    echo "üåê Ejecutando tests E2E con Cypress..."
    if [ -f "./script/cypress.sh" ]; then
        ./script/cypress.sh run
    else
        npx cypress run
    fi
    E2E_TEST_EXIT_CODE=$?
    if [ $E2E_TEST_EXIT_CODE -eq 0 ]; then
        echo "‚úÖ Tests E2E completados exitosamente"
    else
        echo "‚ö†Ô∏è  Tests E2E completados con errores (c√≥digo: $E2E_TEST_EXIT_CODE)"
        echo "üí° Continuando con la generaci√≥n del reporte de SonarQube..."
    fi
else
    echo "‚ö†Ô∏è  No se encontraron tests E2E configurados"
    echo "üí° Saltando tests E2E..."
    E2E_TEST_EXIT_CODE=0
fi
echo ""

# Detener el servidor de desarrollo si lo iniciamos
if [ ! -z "$DEV_PID" ]; then
    echo "üõë Deteniendo servidor de desarrollo..."
    kill $DEV_PID 2>/dev/null || true
    echo "‚úÖ Servidor de desarrollo detenido"
    echo ""
fi

# Verificar que se generaron los archivos necesarios
echo "üîç Verificando archivos generados..."

# Verificar reporte de SonarQube (opcional para Nuxt)
if [ -f "sonar-report.xml" ]; then
    echo "‚úÖ Reporte de SonarQube generado: sonar-report.xml"
else
    echo "‚ö†Ô∏è  No se gener√≥ sonar-report.xml (opcional para Nuxt)"
fi

# Verificar cobertura
if [ -f "coverage/lcov.info" ]; then
    echo "‚úÖ Archivo de cobertura generado: coverage/lcov.info"
    COVERAGE_LINES=$(wc -l < coverage/lcov.info)
    echo "üìä L√≠neas de cobertura: $COVERAGE_LINES"
else
    echo "‚ö†Ô∏è  No se gener√≥ coverage/lcov.info"
    echo "üí° Se continuar√° sin reporte de cobertura"
fi

echo ""

# Configurar token de SonarQube
SONAR_TOKEN="sqp_5f26c63eeae45aa0b06f61889c6b6f34ae24b0fd"
echo "üîë Usando token de SonarQube configurado"

# Ejecutar SonarQube Scanner
echo "üìä Ejecutando SonarQube Scanner..."

# Construir comando base
SONAR_CMD="npx sonar-scanner \
  -Dsonar.projectKey=Nuxt-WebNovaWp \
  -Dsonar.sources=. \
  -Dsonar.host.url=https://sonar.webnovawp.com \
  -Dsonar.login=\"$SONAR_TOKEN\""

# Agregar reporte de tests si existe
if [ -f "sonar-report.xml" ]; then
    SONAR_CMD="$SONAR_CMD -Dsonar.testExecutionReportPaths=sonar-report.xml"
fi

# Agregar cobertura si existe
if [ -f "coverage/lcov.info" ]; then
    SONAR_CMD="$SONAR_CMD -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info"
fi

# Ejecutar comando
eval $SONAR_CMD
SONAR_EXIT_CODE=$?

echo ""
echo "üìä Resumen del Quality Gate:"
echo "=============================="
echo "üîç ESLint: $([ $LINT_EXIT_CODE -eq 0 ] && echo "‚úÖ PAS√ì" || echo "‚ùå FALL√ì")"
echo "‚ú® Formato: $([ $FORMAT_EXIT_CODE -eq 0 ] && echo "‚úÖ PAS√ì" || echo "‚ùå FALL√ì")"
echo "üß™ Tests Unitarios: $([ $UNIT_TEST_EXIT_CODE -eq 0 ] && echo "‚úÖ PAS√ì" || echo "‚ùå FALL√ì")"
echo "üåê Tests E2E: $([ $E2E_TEST_EXIT_CODE -eq 0 ] && echo "‚úÖ PAS√ì" || echo "‚ùå FALL√ì")"
echo "üìä SonarQube: $([ $SONAR_EXIT_CODE -eq 0 ] && echo "‚úÖ PAS√ì" || echo "‚ùå FALL√ì")"
echo ""

# Determinar si el quality gate pas√≥
TOTAL_FAILURES=$((LINT_EXIT_CODE + FORMAT_EXIT_CODE + UNIT_TEST_EXIT_CODE + E2E_TEST_EXIT_CODE + SONAR_EXIT_CODE))

if [ $TOTAL_FAILURES -eq 0 ]; then
    echo "üéâ ¬°Quality Gate PAS√ì exitosamente!"
    echo "‚úÖ Todos los checks pasaron"
    echo "üìä Resultados enviados a SonarQube"
    echo "üåê Ver resultados en: https://sonar.webnovawp.com"
    echo ""
    echo "üìÖ Finalizado: $(date)"
    exit 0
else
    echo "‚ùå Quality Gate FALL√ì"
    echo "‚ö†Ô∏è  $TOTAL_FAILURES check(s) fallaron"
    echo "üí° Revisa los errores arriba y corrige los problemas"
    echo ""
    echo "üìÖ Finalizado: $(date)"
    exit 1
fi
